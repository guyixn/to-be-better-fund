server:
  # 服务器端口
  port: 7006
spring:
  application:
    # 应用名称
    name: to-store-fund
  cloud:
    nacos:
      discovery:
        # Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
        server-addr: 192.168.0.203:8848
        # 注册到 nacos 的指定 namespace，默认为 public
        namespace: public
        # Nacos认证信息
        # password: nacos
        # username: nacos
        group: fund-store
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      auto-offset-reset: latest
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      fetch-max-wait: 10000 # poll 一次拉取的阻塞的最大时长，单位：毫秒。这里指的是阻塞拉取需要满足至少 fetch-min-size 大小的消息
      fetch-min-size: 10 # poll 一次消息拉取的最小数据量，单位：字节
      max-poll-records: 1000 # poll 一次消息拉取的最大数量
      properties:
        spring:
          json:
            trusted:
              packages: com.store_fund.eastmoney.consumer
    listener:
      type: BATCH # 监听器类型，默认为 SINGLE ，只监听单条消息。这里我们配置 BATCH ，监听多条消息，批量消费
      missing-topics-fatal: false # 消费监听接口监听的主题不存在时，默认会报错。所以通过设置为 false ，解决报错
  # 对应 RedisProperties 类
  redis:
    host: localhost
    port: 6379
    # Redis 服务器密码，默认为空。生产中，一定要设置 Redis 密码！
    password: xxx
    database: 0 # Redis 数据库号，默认为 0 。
    timeout: 0 # Redis 连接超时时间，单位：毫秒。
    # 对应 RedisProperties.Jedis 内部类
    jedis:
      pool:
        max-active: 25 # 连接池最大连接数，默认为 8 。使用负数表示没有限制。
        max-idle: 8 # 默认连接数最小空闲的连接数，默认为 8 。使用负数表示没有限制。
        min-idle: 0 # 默认连接池最小空闲的连接数，默认为 0 。允许设置 0 和 正数。
        max-wait: -1 # 连接池最大阻塞等待时间，单位：毫秒。默认为 -1 ，表示不限制。
  main:
    allow-bean-definition-overriding: true
  datasource:
    dynamic:
      datasource:
        house:
          url: jdbc:mysql://localhost:3306/fund_house?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
          username: root
          password: zxcv1234!@#$
          driverClassName: com.mysql.cj.jdbc.Driver
          type: com.zaxxer.hikari.HikariDataSource
  # shardingjdbc 配置
  shardingsphere:
    mode:
      type: Memory
    datasource:
      names: ds0,ds1,ds2,ds3,ds4
      ds0:
        jdbc-url: jdbc:mysql://localhost:3306/fund_ds0?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
        username: root
        password: zxcv1234!@#$
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
      ds1:
        jdbc-url: jdbc:mysql://localhost:3306/fund_ds1?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
        username: root
        password: zxcv1234!@#$
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
      ds2:
        jdbc-url: jdbc:mysql://localhost:3306/fund_ds2?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
        username: root
        password: zxcv1234!@#$
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
      ds3:
        jdbc-url: jdbc:mysql://localhost:3306/fund_ds3?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
        username: root
        password: zxcv1234!@#$
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
      ds4:
        jdbc-url: jdbc:mysql://localhost:3306/fund_ds4?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
        username: root
        password: zxcv1234!@#$
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
    rules:
      sharding:
        tables:
          t_fund_history_net:
            actualDataNodes: ds$->{0..4}.t_fund_history_net$->{0..15}
            databaseStrategy:
              standard:
                shardingColumn: fund_code
                shardingAlgorithmName: db-inline
            tableStrategy:
              standard:
                shardingColumn: fund_code
                shardingAlgorithmName: table-inline
            keyGenerateStrategy:
              column: fund_code
              keyGeneratorName: key-snowflake
              props:
                worker-id: 1
        sharding-algorithms:
          db-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{Long.parseLong(fund_code) % 5}
          table-inline:
            type: INLINE
            props:
              algorithm-expression: t_fund_history_net$->{Long.parseLong(fund_code) % 16}
        key-generators:
          key-snowflake:
            type: SNOWFLAKE
            props:
              max-vibration-offset: 1
              max-tolerate-time-difference-milliseconds: 10
#    props:
#      sql-show: true
#      sql-comment-parse-enabled: true
#mybatis-plus:
#  configuration:
#    log-impl: com.store_fund.log.CustomLogOutImpl
  #开启sql日志
  #    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#mybatis-plus:
#  #数据表的字段下划线转驼峰开启
#  configuration:
#    map-underscore-to-camel-case: true
logging:
  level:
    org:
      springframework:
        kafka: ERROR # spring-kafka INFO 日志太多了，所以我们限制只打印 ERROR 级别
      apache:
        kafka: ERROR # kafka INFO 日志太多了，所以我们限制只打印 ERROR 级别
